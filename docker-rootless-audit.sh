#!/bin/bash

set -euo pipefail

#########################################
#            –§–£–ù–ö–¶–ò–ò –õ–û–ì–û–í              #
#########################################

STATUS_SUMMARY=()

log()    { echo -e "$@"; }
ok()     { log "‚úÖ $@"; STATUS_SUMMARY+=("[OK] $@"); }
warn()   { log "‚ö†Ô∏è $@"; STATUS_SUMMARY+=("[WARN] $@"); }
fail()   { log "‚ùå $@"; STATUS_SUMMARY+=("[FAIL] $@"); }
step()   { log "\n$@"; }

show_summary() {
    log "\n--------------------------------------------"
    log "üìã –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∞—É–¥–∏—Ç–∞:"
    for status in "${STATUS_SUMMARY[@]}"; do
        echo "$status"
    done
    log "--------------------------------------------"
}

#########################################
#               –°–ö–†–ò–ü–¢                  #
#########################################

if [[ "${1-}" =~ ^-h|--help$ ]]; then
    echo "Usage: $0
–ü—Ä–æ–≤–æ–¥–∏—Ç –∞—É–¥–∏—Ç rootless Docker.
"
    exit 0
fi

CURRENT_USER=$(whoami)
KERNEL_VERSION=$(uname -r)
CONFIG_FILE="/boot/config-$KERNEL_VERSION"

log "üîç Rootless Docker Audit Script"
log "üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $CURRENT_USER"
log "üß† –Ø–¥—Ä–æ: $KERNEL_VERSION"
log "--------------------------------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–Ω–∞—Ä–Ω–∏–∫–æ–≤
step "[A] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
for bin in pgrep ps stat grep uname awk lsns unshare command docker; do
    if ! command -v "$bin" &>/dev/null; then
        fail "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —É—Ç–∏–ª–∏—Ç–∞: $bin"
        [ "$bin" != "docker" ] && exit 1 # –ë–µ–∑ docker –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
    fi
done

# 0. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ dockerd
step "[0] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è dockerd:"
DOCKERD_PID=$(pgrep -xo dockerd 2>/dev/null || true)
if [ -z "$DOCKERD_PID" ]; then
    fail "–ü—Ä–æ—Ü–µ—Å—Å dockerd –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    show_summary; exit 1
fi

DOCKERD_USER=$(ps -o user= -p "$DOCKERD_PID")
log "üîπ dockerd –∑–∞–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: $DOCKERD_USER"
if [ "$DOCKERD_USER" != "root" ]; then
    ok "dockerd –∑–∞–ø—É—â–µ–Ω –±–µ–∑ root (rootless mode)"
else
    fail "dockerd —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ root. –ê—É–¥–∏—Ç rootless –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω."
    show_summary; exit 1
fi

if [ "$CURRENT_USER" != "$DOCKERD_USER" ]; then
    fail "–°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–µ —Ç–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —á—Ç–æ –∏ dockerd ($CURRENT_USER vs $DOCKERD_USER)!"
    warn "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞—É–¥–∏—Ç –æ—Ç –∏–º–µ–Ω–∏: $DOCKERD_USER"
    show_summary; exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ dockerd –æ—Ç root –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
OTHER_DOCKERD_PID=$(pgrep -xo -u root dockerd 2>/dev/null || true)
if [ -n "$OTHER_DOCKERD_PID" ]; then
    warn "–ù–∞–π–¥–µ–Ω –æ–±—ã—á–Ω—ã–π dockerd, –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –æ—Ç root (PID: $OTHER_DOCKERD_PID). –í–æ–∑–º–æ–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ—Ä—Ç–æ–≤ –∏ —Å–æ–∫–µ—Ç–æ–≤."
fi

log "--------------------------------------------"

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ CONFIG_USER_NS
step "[1] –ü—Ä–æ–≤–µ—Ä–∫–∞ CONFIG_USER_NS:"
if [ -f "$CONFIG_FILE" ]; then
    if grep -q "CONFIG_USER_NS=y" "$CONFIG_FILE"; then
        ok "CONFIG_USER_NS –≤–∫–ª—é—á—ë–Ω"
    else
        fail "CONFIG_USER_NS –≤—ã–∫–ª—é—á–µ–Ω! Rootless Docker –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å"
    fi
else
    warn "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —è–¥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ $CONFIG_FILE"
fi

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ /etc/subuid –∏ /etc/subgid
step "[2] –ü—Ä–æ–≤–µ—Ä–∫–∞ /etc/subuid –∏ /etc/subgid:"
SUBUID_LINE=$(grep "^$CURRENT_USER:" /etc/subuid 2>/dev/null || true)
SUBGID_LINE=$(grep "^$CURRENT_USER:" /etc/subgid 2>/dev/null || true)
if [ -n "$SUBUID_LINE" ]; then
    ok "–ó–∞–ø–∏—Å—å –≤ /etc/subuid –¥–ª—è $CURRENT_USER: $SUBUID_LINE"
else
    fail "–ù–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ /etc/subuid –¥–ª—è $CURRENT_USER"
fi
if [ -n "$SUBGID_LINE" ]; then
    ok "–ó–∞–ø–∏—Å—å –≤ /etc/subgid –¥–ª—è $CURRENT_USER: $SUBGID_LINE"
else
    fail "–ù–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ /etc/subgid –¥–ª—è $CURRENT_USER"
fi

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–∏–ª–∏—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è rootless Docker
step "[3] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç:"
for bin in slirp4netns fuse-overlayfs newuidmap newgidmap; do
    if command -v "$bin" &> /dev/null; then
        ok "$bin –Ω–∞–π–¥–µ–Ω"
    else
        fail "$bin –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
done

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ cgroup
step "[4] –ü—Ä–æ–≤–µ—Ä–∫–∞ cgroup:"
CGROUP_FS=$(stat -fc %T /sys/fs/cgroup/ 2>/dev/null || echo "none")
if [ "$CGROUP_FS" = "cgroup2fs" ]; then
    ok "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è cgroup v2"
else
    warn "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è cgroup v1 ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å cgroup v2"
fi

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ user namespace
step "[5] –ü—Ä–æ–≤–µ—Ä–∫–∞ user namespace (unshare):"
if unshare -Ur true &> /dev/null; then
    ok "User namespaces —Ä–∞–±–æ—Ç–∞—é—Ç (unshare -Ur)"
else
    fail "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å user namespace (unshare -Ur)"
fi

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ user namespaces
step "[5.1] –ü–æ–¥–¥–µ—Ä–∂–∫–∞ user namespaces –≤ —Å–∏—Å—Ç–µ–º–µ:"
if lsns | grep -q user; then
    ok "User namespaces –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"
else
    warn "User namespaces –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–º—ë–Ω"
fi

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ docker info –∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
step "[6] –ü—Ä–æ–≤–µ—Ä–∫–∞ docker info:"
if command -v docker &> /dev/null; then
    log "–í–µ—Ä—Å–∏—è docker: $(docker --version)"
    if docker info --format '{{json .SecurityOptions}}' | grep -q rootless; then
        ok "Docker —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ rootless —Ä–µ–∂–∏–º–µ (SecurityOptions)"
    else
        fail "Docker –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ rootless —Ä–µ–∂–∏–º–µ (SecurityOptions)"
    fi
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker host env
    if [[ "${DOCKER_HOST:-}" == "unix://"* ]]; then
        ok "DOCKER_HOST –∏—Å–ø–æ–ª—å–∑—É–µ—Ç unix socket: $DOCKER_HOST"
    else
        warn "DOCKER_HOST –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–æ–∫–µ—Ç"
    fi
else
    fail "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
step "[7] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Å–æ–∫–µ—Ç–æ–≤:"
if [ -n "${XDG_RUNTIME_DIR:-}" ]; then
    ok "XDG_RUNTIME_DIR: $XDG_RUNTIME_DIR"
else
    warn "XDG_RUNTIME_DIR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

if [ -S "$XDG_RUNTIME_DIR/docker.sock" ]; then
    ok "docker.sock –æ–±–Ω–∞—Ä—É–∂–µ–Ω: $XDG_RUNTIME_DIR/docker.sock"
else
    fail "docker.sock –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ $XDG_RUNTIME_DIR/docker.sock"
fi

# 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∫–µ—Ç–æ–≤ dockerd
step "[8] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∫–µ—Ç–æ–≤ dockerd:"
for sock in "/run/user/$(id -u)/docker.sock" "$XDG_RUNTIME_DIR/docker.sock"; do
    if [ -S "$sock" ]; then
        ok "–°–æ–∫–µ—Ç –Ω–∞–π–¥–µ–Ω: $sock"
    else
        warn "–°–æ–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: $sock"
    fi
done

# 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã
step "[9] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ /etc/subuid, /etc/subgid:"
for file in /etc/subuid /etc/subgid; do
    if [ -f "$file" ]; then
        PERM=$(stat -c "%a" "$file")
        [ "$PERM" -le 644 ] && ok "$file –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ $PERM" || warn "$file –∏–º–µ–µ—Ç —Å–ª–∏—à–∫–æ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–∞–≤–∞ ($PERM), —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è <=644"
    else
        warn "$file –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
done

# 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö docker
step "[10] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
for var in DOCKER_DRIVER DOCKER_ROOTLESS_ROOTLESSKIT_PORT_DRIVER; do
    if [ -n "${!var:-}" ]; then
        ok "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è $var —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${!var}"
    fi
done

# 11. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º (–≤—ã–≤–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å FAIL/WARN)
SHOW_RECOMMEND=0
for status in "${STATUS_SUMMARY[@]}"; do
    [[ "$status" =~ "\[FAIL\]" || "$status" =~ "\[WARN\]" ]] && SHOW_RECOMMEND=1
done
if [ "$SHOW_RECOMMEND" = 1 ]; then
    log "\nüöë –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
    [[ "$(grep -q 'CONFIG_USER_NS' <<<"${STATUS_SUMMARY[*]}" || true)" ]] && \
        log "  - –í–∫–ª—é—á–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É user namespaces –≤ —è–¥—Ä–µ (CONFIG_USER_NS=y)"
    [[ "$(grep -q '/etc/subuid' <<<"${STATUS_SUMMARY[*]}" || true)" ]] && \
        log "  - –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É '$CURRENT_USER:100000:65536' –≤ /etc/subuid –∏ /etc/subgid"
    [[ "$(grep -q 'cgroup v1' <<<"${STATUS_SUMMARY[*]}" || true)" ]] && \
        log "  - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ cgroup v2 –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ rootless Docker"
    [[ "$(grep -q 'slirp4netns –Ω–µ –Ω–∞–π–¥–µ–Ω' <<<"${STATUS_SUMMARY[*]}" || true)" ]] && \
        log "  - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ slirp4netns, fuse-overlayfs, newuidmap, newgidmap –¥–ª—è rootless —Ä–µ–∂–∏–º–∞"
    [[ "$(grep -q 'docker.sock –Ω–µ –Ω–∞–π–¥–µ–Ω' <<<"${STATUS_SUMMARY[*]}" || true)" ]] && \
        log "  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—É—Å–∫ dockerd rootless: https://docs.docker.com/engine/security/rootless/"
fi

show_summary

log "\nüîö –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à—ë–Ω"
